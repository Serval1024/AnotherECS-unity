//GENERATOR = AnotherECS.Unity.Jobs.Generator.FilterExtensionsGenerator FILENAME = FilterExtensions.cs N = 8

// <auto-generated>
// This source code was auto-generated by FilterExtensionsGenerator.cs
// </auto-generated>

using AnotherECS.Core;
using Unity.Jobs;
using EntityId = System.UInt32;

namespace AnotherECS.Unity.Jobs
{
    public unsafe static class FilterExtensions
    {
		public unsafe static class BagJobFactory
		{
			public static JobBagR<T0> CreateR<T0>(State state, EntityCollection entities)
				where T0 : unmanaged, IComponent

            {
                var arrayProvider = JobsGlobalRegister.Get(state);

                JobBagR<T0> bag;
                bag.indexes = arrayProvider.GetNativeArrayByDenseId<EntityId>(entities.id, entities.entities);
                bag.count = (int)entities.entities.Length;

				bag.sparse0 = arrayProvider.GetNativeArrayByComponent<T0, ushort>(0, state.ReadSparse<T0, ushort>());
				bag.component0 = arrayProvider.GetNativeArrayByComponent<T0, T0>(1, state.ReadDense<T0>());
				bag.version0 = arrayProvider.GetNativeArrayByComponent<T0, uint>(2, state.ReadVersion<T0>());
                if (!bag.version0.IsCreated){ bag.version0 = arrayProvider.UintDummy; }

                return bag;
            }

			public static JobBagR<T0> CreateR<T0>(IdFilter<T0> filter)
				where T0 : unmanaged, IComponent

				=> BagJobFactory.CreateR<T0>(filter.GetState(), filter.GetFilterData()->GetEntities());
			public static JobBagR<T0, T1> CreateR<T0, T1>(State state, EntityCollection entities)
				where T0 : unmanaged, IComponent
				where T1 : unmanaged, IComponent

            {
                var arrayProvider = JobsGlobalRegister.Get(state);

                JobBagR<T0, T1> bag;
                bag.indexes = arrayProvider.GetNativeArrayByDenseId<EntityId>(entities.id, entities.entities);
                bag.count = (int)entities.entities.Length;

				bag.sparse0 = arrayProvider.GetNativeArrayByComponent<T0, ushort>(0, state.ReadSparse<T0, ushort>());
				bag.component0 = arrayProvider.GetNativeArrayByComponent<T0, T0>(1, state.ReadDense<T0>());
				bag.version0 = arrayProvider.GetNativeArrayByComponent<T0, uint>(2, state.ReadVersion<T0>());
                if (!bag.version0.IsCreated){ bag.version0 = arrayProvider.UintDummy; }
				bag.sparse1 = arrayProvider.GetNativeArrayByComponent<T1, ushort>(0, state.ReadSparse<T1, ushort>());
				bag.component1 = arrayProvider.GetNativeArrayByComponent<T1, T1>(1, state.ReadDense<T1>());
				bag.version1 = arrayProvider.GetNativeArrayByComponent<T1, uint>(2, state.ReadVersion<T1>());
                if (!bag.version1.IsCreated){ bag.version1 = arrayProvider.UintDummy; }

                return bag;
            }

			public static JobBagR<T0, T1> CreateR<T0, T1>(IdFilter<T0, T1> filter)
				where T0 : unmanaged, IComponent
				where T1 : unmanaged, IComponent

				=> BagJobFactory.CreateR<T0, T1>(filter.GetState(), filter.GetFilterData()->GetEntities());
			public static JobBagR<T0, T1, T2> CreateR<T0, T1, T2>(State state, EntityCollection entities)
				where T0 : unmanaged, IComponent
				where T1 : unmanaged, IComponent
				where T2 : unmanaged, IComponent

            {
                var arrayProvider = JobsGlobalRegister.Get(state);

                JobBagR<T0, T1, T2> bag;
                bag.indexes = arrayProvider.GetNativeArrayByDenseId<EntityId>(entities.id, entities.entities);
                bag.count = (int)entities.entities.Length;

				bag.sparse0 = arrayProvider.GetNativeArrayByComponent<T0, ushort>(0, state.ReadSparse<T0, ushort>());
				bag.component0 = arrayProvider.GetNativeArrayByComponent<T0, T0>(1, state.ReadDense<T0>());
				bag.version0 = arrayProvider.GetNativeArrayByComponent<T0, uint>(2, state.ReadVersion<T0>());
                if (!bag.version0.IsCreated){ bag.version0 = arrayProvider.UintDummy; }
				bag.sparse1 = arrayProvider.GetNativeArrayByComponent<T1, ushort>(0, state.ReadSparse<T1, ushort>());
				bag.component1 = arrayProvider.GetNativeArrayByComponent<T1, T1>(1, state.ReadDense<T1>());
				bag.version1 = arrayProvider.GetNativeArrayByComponent<T1, uint>(2, state.ReadVersion<T1>());
                if (!bag.version1.IsCreated){ bag.version1 = arrayProvider.UintDummy; }
				bag.sparse2 = arrayProvider.GetNativeArrayByComponent<T2, ushort>(0, state.ReadSparse<T2, ushort>());
				bag.component2 = arrayProvider.GetNativeArrayByComponent<T2, T2>(1, state.ReadDense<T2>());
				bag.version2 = arrayProvider.GetNativeArrayByComponent<T2, uint>(2, state.ReadVersion<T2>());
                if (!bag.version2.IsCreated){ bag.version2 = arrayProvider.UintDummy; }

                return bag;
            }

			public static JobBagR<T0, T1, T2> CreateR<T0, T1, T2>(IdFilter<T0, T1, T2> filter)
				where T0 : unmanaged, IComponent
				where T1 : unmanaged, IComponent
				where T2 : unmanaged, IComponent

				=> BagJobFactory.CreateR<T0, T1, T2>(filter.GetState(), filter.GetFilterData()->GetEntities());
			public static JobBagR<T0, T1, T2, T3> CreateR<T0, T1, T2, T3>(State state, EntityCollection entities)
				where T0 : unmanaged, IComponent
				where T1 : unmanaged, IComponent
				where T2 : unmanaged, IComponent
				where T3 : unmanaged, IComponent

            {
                var arrayProvider = JobsGlobalRegister.Get(state);

                JobBagR<T0, T1, T2, T3> bag;
                bag.indexes = arrayProvider.GetNativeArrayByDenseId<EntityId>(entities.id, entities.entities);
                bag.count = (int)entities.entities.Length;

				bag.sparse0 = arrayProvider.GetNativeArrayByComponent<T0, ushort>(0, state.ReadSparse<T0, ushort>());
				bag.component0 = arrayProvider.GetNativeArrayByComponent<T0, T0>(1, state.ReadDense<T0>());
				bag.version0 = arrayProvider.GetNativeArrayByComponent<T0, uint>(2, state.ReadVersion<T0>());
                if (!bag.version0.IsCreated){ bag.version0 = arrayProvider.UintDummy; }
				bag.sparse1 = arrayProvider.GetNativeArrayByComponent<T1, ushort>(0, state.ReadSparse<T1, ushort>());
				bag.component1 = arrayProvider.GetNativeArrayByComponent<T1, T1>(1, state.ReadDense<T1>());
				bag.version1 = arrayProvider.GetNativeArrayByComponent<T1, uint>(2, state.ReadVersion<T1>());
                if (!bag.version1.IsCreated){ bag.version1 = arrayProvider.UintDummy; }
				bag.sparse2 = arrayProvider.GetNativeArrayByComponent<T2, ushort>(0, state.ReadSparse<T2, ushort>());
				bag.component2 = arrayProvider.GetNativeArrayByComponent<T2, T2>(1, state.ReadDense<T2>());
				bag.version2 = arrayProvider.GetNativeArrayByComponent<T2, uint>(2, state.ReadVersion<T2>());
                if (!bag.version2.IsCreated){ bag.version2 = arrayProvider.UintDummy; }
				bag.sparse3 = arrayProvider.GetNativeArrayByComponent<T3, ushort>(0, state.ReadSparse<T3, ushort>());
				bag.component3 = arrayProvider.GetNativeArrayByComponent<T3, T3>(1, state.ReadDense<T3>());
				bag.version3 = arrayProvider.GetNativeArrayByComponent<T3, uint>(2, state.ReadVersion<T3>());
                if (!bag.version3.IsCreated){ bag.version3 = arrayProvider.UintDummy; }

                return bag;
            }

			public static JobBagR<T0, T1, T2, T3> CreateR<T0, T1, T2, T3>(IdFilter<T0, T1, T2, T3> filter)
				where T0 : unmanaged, IComponent
				where T1 : unmanaged, IComponent
				where T2 : unmanaged, IComponent
				where T3 : unmanaged, IComponent

				=> BagJobFactory.CreateR<T0, T1, T2, T3>(filter.GetState(), filter.GetFilterData()->GetEntities());
			public static JobBagR<T0, T1, T2, T3, T4> CreateR<T0, T1, T2, T3, T4>(State state, EntityCollection entities)
				where T0 : unmanaged, IComponent
				where T1 : unmanaged, IComponent
				where T2 : unmanaged, IComponent
				where T3 : unmanaged, IComponent
				where T4 : unmanaged, IComponent

            {
                var arrayProvider = JobsGlobalRegister.Get(state);

                JobBagR<T0, T1, T2, T3, T4> bag;
                bag.indexes = arrayProvider.GetNativeArrayByDenseId<EntityId>(entities.id, entities.entities);
                bag.count = (int)entities.entities.Length;

				bag.sparse0 = arrayProvider.GetNativeArrayByComponent<T0, ushort>(0, state.ReadSparse<T0, ushort>());
				bag.component0 = arrayProvider.GetNativeArrayByComponent<T0, T0>(1, state.ReadDense<T0>());
				bag.version0 = arrayProvider.GetNativeArrayByComponent<T0, uint>(2, state.ReadVersion<T0>());
                if (!bag.version0.IsCreated){ bag.version0 = arrayProvider.UintDummy; }
				bag.sparse1 = arrayProvider.GetNativeArrayByComponent<T1, ushort>(0, state.ReadSparse<T1, ushort>());
				bag.component1 = arrayProvider.GetNativeArrayByComponent<T1, T1>(1, state.ReadDense<T1>());
				bag.version1 = arrayProvider.GetNativeArrayByComponent<T1, uint>(2, state.ReadVersion<T1>());
                if (!bag.version1.IsCreated){ bag.version1 = arrayProvider.UintDummy; }
				bag.sparse2 = arrayProvider.GetNativeArrayByComponent<T2, ushort>(0, state.ReadSparse<T2, ushort>());
				bag.component2 = arrayProvider.GetNativeArrayByComponent<T2, T2>(1, state.ReadDense<T2>());
				bag.version2 = arrayProvider.GetNativeArrayByComponent<T2, uint>(2, state.ReadVersion<T2>());
                if (!bag.version2.IsCreated){ bag.version2 = arrayProvider.UintDummy; }
				bag.sparse3 = arrayProvider.GetNativeArrayByComponent<T3, ushort>(0, state.ReadSparse<T3, ushort>());
				bag.component3 = arrayProvider.GetNativeArrayByComponent<T3, T3>(1, state.ReadDense<T3>());
				bag.version3 = arrayProvider.GetNativeArrayByComponent<T3, uint>(2, state.ReadVersion<T3>());
                if (!bag.version3.IsCreated){ bag.version3 = arrayProvider.UintDummy; }
				bag.sparse4 = arrayProvider.GetNativeArrayByComponent<T4, ushort>(0, state.ReadSparse<T4, ushort>());
				bag.component4 = arrayProvider.GetNativeArrayByComponent<T4, T4>(1, state.ReadDense<T4>());
				bag.version4 = arrayProvider.GetNativeArrayByComponent<T4, uint>(2, state.ReadVersion<T4>());
                if (!bag.version4.IsCreated){ bag.version4 = arrayProvider.UintDummy; }

                return bag;
            }

			public static JobBagR<T0, T1, T2, T3, T4> CreateR<T0, T1, T2, T3, T4>(IdFilter<T0, T1, T2, T3, T4> filter)
				where T0 : unmanaged, IComponent
				where T1 : unmanaged, IComponent
				where T2 : unmanaged, IComponent
				where T3 : unmanaged, IComponent
				where T4 : unmanaged, IComponent

				=> BagJobFactory.CreateR<T0, T1, T2, T3, T4>(filter.GetState(), filter.GetFilterData()->GetEntities());
			public static JobBagR<T0, T1, T2, T3, T4, T5> CreateR<T0, T1, T2, T3, T4, T5>(State state, EntityCollection entities)
				where T0 : unmanaged, IComponent
				where T1 : unmanaged, IComponent
				where T2 : unmanaged, IComponent
				where T3 : unmanaged, IComponent
				where T4 : unmanaged, IComponent
				where T5 : unmanaged, IComponent

            {
                var arrayProvider = JobsGlobalRegister.Get(state);

                JobBagR<T0, T1, T2, T3, T4, T5> bag;
                bag.indexes = arrayProvider.GetNativeArrayByDenseId<EntityId>(entities.id, entities.entities);
                bag.count = (int)entities.entities.Length;

				bag.sparse0 = arrayProvider.GetNativeArrayByComponent<T0, ushort>(0, state.ReadSparse<T0, ushort>());
				bag.component0 = arrayProvider.GetNativeArrayByComponent<T0, T0>(1, state.ReadDense<T0>());
				bag.version0 = arrayProvider.GetNativeArrayByComponent<T0, uint>(2, state.ReadVersion<T0>());
                if (!bag.version0.IsCreated){ bag.version0 = arrayProvider.UintDummy; }
				bag.sparse1 = arrayProvider.GetNativeArrayByComponent<T1, ushort>(0, state.ReadSparse<T1, ushort>());
				bag.component1 = arrayProvider.GetNativeArrayByComponent<T1, T1>(1, state.ReadDense<T1>());
				bag.version1 = arrayProvider.GetNativeArrayByComponent<T1, uint>(2, state.ReadVersion<T1>());
                if (!bag.version1.IsCreated){ bag.version1 = arrayProvider.UintDummy; }
				bag.sparse2 = arrayProvider.GetNativeArrayByComponent<T2, ushort>(0, state.ReadSparse<T2, ushort>());
				bag.component2 = arrayProvider.GetNativeArrayByComponent<T2, T2>(1, state.ReadDense<T2>());
				bag.version2 = arrayProvider.GetNativeArrayByComponent<T2, uint>(2, state.ReadVersion<T2>());
                if (!bag.version2.IsCreated){ bag.version2 = arrayProvider.UintDummy; }
				bag.sparse3 = arrayProvider.GetNativeArrayByComponent<T3, ushort>(0, state.ReadSparse<T3, ushort>());
				bag.component3 = arrayProvider.GetNativeArrayByComponent<T3, T3>(1, state.ReadDense<T3>());
				bag.version3 = arrayProvider.GetNativeArrayByComponent<T3, uint>(2, state.ReadVersion<T3>());
                if (!bag.version3.IsCreated){ bag.version3 = arrayProvider.UintDummy; }
				bag.sparse4 = arrayProvider.GetNativeArrayByComponent<T4, ushort>(0, state.ReadSparse<T4, ushort>());
				bag.component4 = arrayProvider.GetNativeArrayByComponent<T4, T4>(1, state.ReadDense<T4>());
				bag.version4 = arrayProvider.GetNativeArrayByComponent<T4, uint>(2, state.ReadVersion<T4>());
                if (!bag.version4.IsCreated){ bag.version4 = arrayProvider.UintDummy; }
				bag.sparse5 = arrayProvider.GetNativeArrayByComponent<T5, ushort>(0, state.ReadSparse<T5, ushort>());
				bag.component5 = arrayProvider.GetNativeArrayByComponent<T5, T5>(1, state.ReadDense<T5>());
				bag.version5 = arrayProvider.GetNativeArrayByComponent<T5, uint>(2, state.ReadVersion<T5>());
                if (!bag.version5.IsCreated){ bag.version5 = arrayProvider.UintDummy; }

                return bag;
            }

			public static JobBagR<T0, T1, T2, T3, T4, T5> CreateR<T0, T1, T2, T3, T4, T5>(IdFilter<T0, T1, T2, T3, T4, T5> filter)
				where T0 : unmanaged, IComponent
				where T1 : unmanaged, IComponent
				where T2 : unmanaged, IComponent
				where T3 : unmanaged, IComponent
				where T4 : unmanaged, IComponent
				where T5 : unmanaged, IComponent

				=> BagJobFactory.CreateR<T0, T1, T2, T3, T4, T5>(filter.GetState(), filter.GetFilterData()->GetEntities());
			public static JobBagR<T0, T1, T2, T3, T4, T5, T6> CreateR<T0, T1, T2, T3, T4, T5, T6>(State state, EntityCollection entities)
				where T0 : unmanaged, IComponent
				where T1 : unmanaged, IComponent
				where T2 : unmanaged, IComponent
				where T3 : unmanaged, IComponent
				where T4 : unmanaged, IComponent
				where T5 : unmanaged, IComponent
				where T6 : unmanaged, IComponent

            {
                var arrayProvider = JobsGlobalRegister.Get(state);

                JobBagR<T0, T1, T2, T3, T4, T5, T6> bag;
                bag.indexes = arrayProvider.GetNativeArrayByDenseId<EntityId>(entities.id, entities.entities);
                bag.count = (int)entities.entities.Length;

				bag.sparse0 = arrayProvider.GetNativeArrayByComponent<T0, ushort>(0, state.ReadSparse<T0, ushort>());
				bag.component0 = arrayProvider.GetNativeArrayByComponent<T0, T0>(1, state.ReadDense<T0>());
				bag.version0 = arrayProvider.GetNativeArrayByComponent<T0, uint>(2, state.ReadVersion<T0>());
                if (!bag.version0.IsCreated){ bag.version0 = arrayProvider.UintDummy; }
				bag.sparse1 = arrayProvider.GetNativeArrayByComponent<T1, ushort>(0, state.ReadSparse<T1, ushort>());
				bag.component1 = arrayProvider.GetNativeArrayByComponent<T1, T1>(1, state.ReadDense<T1>());
				bag.version1 = arrayProvider.GetNativeArrayByComponent<T1, uint>(2, state.ReadVersion<T1>());
                if (!bag.version1.IsCreated){ bag.version1 = arrayProvider.UintDummy; }
				bag.sparse2 = arrayProvider.GetNativeArrayByComponent<T2, ushort>(0, state.ReadSparse<T2, ushort>());
				bag.component2 = arrayProvider.GetNativeArrayByComponent<T2, T2>(1, state.ReadDense<T2>());
				bag.version2 = arrayProvider.GetNativeArrayByComponent<T2, uint>(2, state.ReadVersion<T2>());
                if (!bag.version2.IsCreated){ bag.version2 = arrayProvider.UintDummy; }
				bag.sparse3 = arrayProvider.GetNativeArrayByComponent<T3, ushort>(0, state.ReadSparse<T3, ushort>());
				bag.component3 = arrayProvider.GetNativeArrayByComponent<T3, T3>(1, state.ReadDense<T3>());
				bag.version3 = arrayProvider.GetNativeArrayByComponent<T3, uint>(2, state.ReadVersion<T3>());
                if (!bag.version3.IsCreated){ bag.version3 = arrayProvider.UintDummy; }
				bag.sparse4 = arrayProvider.GetNativeArrayByComponent<T4, ushort>(0, state.ReadSparse<T4, ushort>());
				bag.component4 = arrayProvider.GetNativeArrayByComponent<T4, T4>(1, state.ReadDense<T4>());
				bag.version4 = arrayProvider.GetNativeArrayByComponent<T4, uint>(2, state.ReadVersion<T4>());
                if (!bag.version4.IsCreated){ bag.version4 = arrayProvider.UintDummy; }
				bag.sparse5 = arrayProvider.GetNativeArrayByComponent<T5, ushort>(0, state.ReadSparse<T5, ushort>());
				bag.component5 = arrayProvider.GetNativeArrayByComponent<T5, T5>(1, state.ReadDense<T5>());
				bag.version5 = arrayProvider.GetNativeArrayByComponent<T5, uint>(2, state.ReadVersion<T5>());
                if (!bag.version5.IsCreated){ bag.version5 = arrayProvider.UintDummy; }
				bag.sparse6 = arrayProvider.GetNativeArrayByComponent<T6, ushort>(0, state.ReadSparse<T6, ushort>());
				bag.component6 = arrayProvider.GetNativeArrayByComponent<T6, T6>(1, state.ReadDense<T6>());
				bag.version6 = arrayProvider.GetNativeArrayByComponent<T6, uint>(2, state.ReadVersion<T6>());
                if (!bag.version6.IsCreated){ bag.version6 = arrayProvider.UintDummy; }

                return bag;
            }

			public static JobBagR<T0, T1, T2, T3, T4, T5, T6> CreateR<T0, T1, T2, T3, T4, T5, T6>(IdFilter<T0, T1, T2, T3, T4, T5, T6> filter)
				where T0 : unmanaged, IComponent
				where T1 : unmanaged, IComponent
				where T2 : unmanaged, IComponent
				where T3 : unmanaged, IComponent
				where T4 : unmanaged, IComponent
				where T5 : unmanaged, IComponent
				where T6 : unmanaged, IComponent

				=> BagJobFactory.CreateR<T0, T1, T2, T3, T4, T5, T6>(filter.GetState(), filter.GetFilterData()->GetEntities());
			public static JobBagR<T0, T1, T2, T3, T4, T5, T6, T7> CreateR<T0, T1, T2, T3, T4, T5, T6, T7>(State state, EntityCollection entities)
				where T0 : unmanaged, IComponent
				where T1 : unmanaged, IComponent
				where T2 : unmanaged, IComponent
				where T3 : unmanaged, IComponent
				where T4 : unmanaged, IComponent
				where T5 : unmanaged, IComponent
				where T6 : unmanaged, IComponent
				where T7 : unmanaged, IComponent

            {
                var arrayProvider = JobsGlobalRegister.Get(state);

                JobBagR<T0, T1, T2, T3, T4, T5, T6, T7> bag;
                bag.indexes = arrayProvider.GetNativeArrayByDenseId<EntityId>(entities.id, entities.entities);
                bag.count = (int)entities.entities.Length;

				bag.sparse0 = arrayProvider.GetNativeArrayByComponent<T0, ushort>(0, state.ReadSparse<T0, ushort>());
				bag.component0 = arrayProvider.GetNativeArrayByComponent<T0, T0>(1, state.ReadDense<T0>());
				bag.version0 = arrayProvider.GetNativeArrayByComponent<T0, uint>(2, state.ReadVersion<T0>());
                if (!bag.version0.IsCreated){ bag.version0 = arrayProvider.UintDummy; }
				bag.sparse1 = arrayProvider.GetNativeArrayByComponent<T1, ushort>(0, state.ReadSparse<T1, ushort>());
				bag.component1 = arrayProvider.GetNativeArrayByComponent<T1, T1>(1, state.ReadDense<T1>());
				bag.version1 = arrayProvider.GetNativeArrayByComponent<T1, uint>(2, state.ReadVersion<T1>());
                if (!bag.version1.IsCreated){ bag.version1 = arrayProvider.UintDummy; }
				bag.sparse2 = arrayProvider.GetNativeArrayByComponent<T2, ushort>(0, state.ReadSparse<T2, ushort>());
				bag.component2 = arrayProvider.GetNativeArrayByComponent<T2, T2>(1, state.ReadDense<T2>());
				bag.version2 = arrayProvider.GetNativeArrayByComponent<T2, uint>(2, state.ReadVersion<T2>());
                if (!bag.version2.IsCreated){ bag.version2 = arrayProvider.UintDummy; }
				bag.sparse3 = arrayProvider.GetNativeArrayByComponent<T3, ushort>(0, state.ReadSparse<T3, ushort>());
				bag.component3 = arrayProvider.GetNativeArrayByComponent<T3, T3>(1, state.ReadDense<T3>());
				bag.version3 = arrayProvider.GetNativeArrayByComponent<T3, uint>(2, state.ReadVersion<T3>());
                if (!bag.version3.IsCreated){ bag.version3 = arrayProvider.UintDummy; }
				bag.sparse4 = arrayProvider.GetNativeArrayByComponent<T4, ushort>(0, state.ReadSparse<T4, ushort>());
				bag.component4 = arrayProvider.GetNativeArrayByComponent<T4, T4>(1, state.ReadDense<T4>());
				bag.version4 = arrayProvider.GetNativeArrayByComponent<T4, uint>(2, state.ReadVersion<T4>());
                if (!bag.version4.IsCreated){ bag.version4 = arrayProvider.UintDummy; }
				bag.sparse5 = arrayProvider.GetNativeArrayByComponent<T5, ushort>(0, state.ReadSparse<T5, ushort>());
				bag.component5 = arrayProvider.GetNativeArrayByComponent<T5, T5>(1, state.ReadDense<T5>());
				bag.version5 = arrayProvider.GetNativeArrayByComponent<T5, uint>(2, state.ReadVersion<T5>());
                if (!bag.version5.IsCreated){ bag.version5 = arrayProvider.UintDummy; }
				bag.sparse6 = arrayProvider.GetNativeArrayByComponent<T6, ushort>(0, state.ReadSparse<T6, ushort>());
				bag.component6 = arrayProvider.GetNativeArrayByComponent<T6, T6>(1, state.ReadDense<T6>());
				bag.version6 = arrayProvider.GetNativeArrayByComponent<T6, uint>(2, state.ReadVersion<T6>());
                if (!bag.version6.IsCreated){ bag.version6 = arrayProvider.UintDummy; }
				bag.sparse7 = arrayProvider.GetNativeArrayByComponent<T7, ushort>(0, state.ReadSparse<T7, ushort>());
				bag.component7 = arrayProvider.GetNativeArrayByComponent<T7, T7>(1, state.ReadDense<T7>());
				bag.version7 = arrayProvider.GetNativeArrayByComponent<T7, uint>(2, state.ReadVersion<T7>());
                if (!bag.version7.IsCreated){ bag.version7 = arrayProvider.UintDummy; }

                return bag;
            }

			public static JobBagR<T0, T1, T2, T3, T4, T5, T6, T7> CreateR<T0, T1, T2, T3, T4, T5, T6, T7>(IdFilter<T0, T1, T2, T3, T4, T5, T6, T7> filter)
				where T0 : unmanaged, IComponent
				where T1 : unmanaged, IComponent
				where T2 : unmanaged, IComponent
				where T3 : unmanaged, IComponent
				where T4 : unmanaged, IComponent
				where T5 : unmanaged, IComponent
				where T6 : unmanaged, IComponent
				where T7 : unmanaged, IComponent

				=> BagJobFactory.CreateR<T0, T1, T2, T3, T4, T5, T6, T7>(filter.GetState(), filter.GetFilterData()->GetEntities());

			public static JobBag<T0> Create<T0>(State state, EntityCollection entities)
				where T0 : unmanaged, IComponent

            {
                var arrayProvider = JobsGlobalRegister.Get(state);

                JobBag<T0> bag;
                bag.indexes = arrayProvider.GetNativeArrayByDenseId<EntityId>(entities.id, entities.entities);
                bag.count = (int)entities.entities.Length;

				bag.sparse0 = arrayProvider.GetNativeArrayByComponent<T0, ushort>(0, state.ReadSparse<T0, ushort>());
				bag.component0 = arrayProvider.GetNativeArrayByComponent<T0, T0>(1, state.GetDense<T0>());
				bag.version0 = arrayProvider.GetNativeArrayByComponent<T0, uint>(2, state.ReadVersion<T0>());
                if (!bag.version0.IsCreated){ bag.version0 = arrayProvider.UintDummy; }

                return bag;
            }

			public static JobBag<T0> Create<T0>(IdFilter<T0> filter)
				where T0 : unmanaged, IComponent

				=> BagJobFactory.Create<T0>(filter.GetState(), filter.GetFilterData()->GetEntities());
			public static JobBag<T0, T1> Create<T0, T1>(State state, EntityCollection entities)
				where T0 : unmanaged, IComponent
				where T1 : unmanaged, IComponent

            {
                var arrayProvider = JobsGlobalRegister.Get(state);

                JobBag<T0, T1> bag;
                bag.indexes = arrayProvider.GetNativeArrayByDenseId<EntityId>(entities.id, entities.entities);
                bag.count = (int)entities.entities.Length;

				bag.sparse0 = arrayProvider.GetNativeArrayByComponent<T0, ushort>(0, state.ReadSparse<T0, ushort>());
				bag.component0 = arrayProvider.GetNativeArrayByComponent<T0, T0>(1, state.GetDense<T0>());
				bag.version0 = arrayProvider.GetNativeArrayByComponent<T0, uint>(2, state.ReadVersion<T0>());
                if (!bag.version0.IsCreated){ bag.version0 = arrayProvider.UintDummy; }
				bag.sparse1 = arrayProvider.GetNativeArrayByComponent<T1, ushort>(0, state.ReadSparse<T1, ushort>());
				bag.component1 = arrayProvider.GetNativeArrayByComponent<T1, T1>(1, state.GetDense<T1>());
				bag.version1 = arrayProvider.GetNativeArrayByComponent<T1, uint>(2, state.ReadVersion<T1>());
                if (!bag.version1.IsCreated){ bag.version1 = arrayProvider.UintDummy; }

                return bag;
            }

			public static JobBag<T0, T1> Create<T0, T1>(IdFilter<T0, T1> filter)
				where T0 : unmanaged, IComponent
				where T1 : unmanaged, IComponent

				=> BagJobFactory.Create<T0, T1>(filter.GetState(), filter.GetFilterData()->GetEntities());
			public static JobBag<T0, T1, T2> Create<T0, T1, T2>(State state, EntityCollection entities)
				where T0 : unmanaged, IComponent
				where T1 : unmanaged, IComponent
				where T2 : unmanaged, IComponent

            {
                var arrayProvider = JobsGlobalRegister.Get(state);

                JobBag<T0, T1, T2> bag;
                bag.indexes = arrayProvider.GetNativeArrayByDenseId<EntityId>(entities.id, entities.entities);
                bag.count = (int)entities.entities.Length;

				bag.sparse0 = arrayProvider.GetNativeArrayByComponent<T0, ushort>(0, state.ReadSparse<T0, ushort>());
				bag.component0 = arrayProvider.GetNativeArrayByComponent<T0, T0>(1, state.GetDense<T0>());
				bag.version0 = arrayProvider.GetNativeArrayByComponent<T0, uint>(2, state.ReadVersion<T0>());
                if (!bag.version0.IsCreated){ bag.version0 = arrayProvider.UintDummy; }
				bag.sparse1 = arrayProvider.GetNativeArrayByComponent<T1, ushort>(0, state.ReadSparse<T1, ushort>());
				bag.component1 = arrayProvider.GetNativeArrayByComponent<T1, T1>(1, state.GetDense<T1>());
				bag.version1 = arrayProvider.GetNativeArrayByComponent<T1, uint>(2, state.ReadVersion<T1>());
                if (!bag.version1.IsCreated){ bag.version1 = arrayProvider.UintDummy; }
				bag.sparse2 = arrayProvider.GetNativeArrayByComponent<T2, ushort>(0, state.ReadSparse<T2, ushort>());
				bag.component2 = arrayProvider.GetNativeArrayByComponent<T2, T2>(1, state.GetDense<T2>());
				bag.version2 = arrayProvider.GetNativeArrayByComponent<T2, uint>(2, state.ReadVersion<T2>());
                if (!bag.version2.IsCreated){ bag.version2 = arrayProvider.UintDummy; }

                return bag;
            }

			public static JobBag<T0, T1, T2> Create<T0, T1, T2>(IdFilter<T0, T1, T2> filter)
				where T0 : unmanaged, IComponent
				where T1 : unmanaged, IComponent
				where T2 : unmanaged, IComponent

				=> BagJobFactory.Create<T0, T1, T2>(filter.GetState(), filter.GetFilterData()->GetEntities());
			public static JobBag<T0, T1, T2, T3> Create<T0, T1, T2, T3>(State state, EntityCollection entities)
				where T0 : unmanaged, IComponent
				where T1 : unmanaged, IComponent
				where T2 : unmanaged, IComponent
				where T3 : unmanaged, IComponent

            {
                var arrayProvider = JobsGlobalRegister.Get(state);

                JobBag<T0, T1, T2, T3> bag;
                bag.indexes = arrayProvider.GetNativeArrayByDenseId<EntityId>(entities.id, entities.entities);
                bag.count = (int)entities.entities.Length;

				bag.sparse0 = arrayProvider.GetNativeArrayByComponent<T0, ushort>(0, state.ReadSparse<T0, ushort>());
				bag.component0 = arrayProvider.GetNativeArrayByComponent<T0, T0>(1, state.GetDense<T0>());
				bag.version0 = arrayProvider.GetNativeArrayByComponent<T0, uint>(2, state.ReadVersion<T0>());
                if (!bag.version0.IsCreated){ bag.version0 = arrayProvider.UintDummy; }
				bag.sparse1 = arrayProvider.GetNativeArrayByComponent<T1, ushort>(0, state.ReadSparse<T1, ushort>());
				bag.component1 = arrayProvider.GetNativeArrayByComponent<T1, T1>(1, state.GetDense<T1>());
				bag.version1 = arrayProvider.GetNativeArrayByComponent<T1, uint>(2, state.ReadVersion<T1>());
                if (!bag.version1.IsCreated){ bag.version1 = arrayProvider.UintDummy; }
				bag.sparse2 = arrayProvider.GetNativeArrayByComponent<T2, ushort>(0, state.ReadSparse<T2, ushort>());
				bag.component2 = arrayProvider.GetNativeArrayByComponent<T2, T2>(1, state.GetDense<T2>());
				bag.version2 = arrayProvider.GetNativeArrayByComponent<T2, uint>(2, state.ReadVersion<T2>());
                if (!bag.version2.IsCreated){ bag.version2 = arrayProvider.UintDummy; }
				bag.sparse3 = arrayProvider.GetNativeArrayByComponent<T3, ushort>(0, state.ReadSparse<T3, ushort>());
				bag.component3 = arrayProvider.GetNativeArrayByComponent<T3, T3>(1, state.GetDense<T3>());
				bag.version3 = arrayProvider.GetNativeArrayByComponent<T3, uint>(2, state.ReadVersion<T3>());
                if (!bag.version3.IsCreated){ bag.version3 = arrayProvider.UintDummy; }

                return bag;
            }

			public static JobBag<T0, T1, T2, T3> Create<T0, T1, T2, T3>(IdFilter<T0, T1, T2, T3> filter)
				where T0 : unmanaged, IComponent
				where T1 : unmanaged, IComponent
				where T2 : unmanaged, IComponent
				where T3 : unmanaged, IComponent

				=> BagJobFactory.Create<T0, T1, T2, T3>(filter.GetState(), filter.GetFilterData()->GetEntities());
			public static JobBag<T0, T1, T2, T3, T4> Create<T0, T1, T2, T3, T4>(State state, EntityCollection entities)
				where T0 : unmanaged, IComponent
				where T1 : unmanaged, IComponent
				where T2 : unmanaged, IComponent
				where T3 : unmanaged, IComponent
				where T4 : unmanaged, IComponent

            {
                var arrayProvider = JobsGlobalRegister.Get(state);

                JobBag<T0, T1, T2, T3, T4> bag;
                bag.indexes = arrayProvider.GetNativeArrayByDenseId<EntityId>(entities.id, entities.entities);
                bag.count = (int)entities.entities.Length;

				bag.sparse0 = arrayProvider.GetNativeArrayByComponent<T0, ushort>(0, state.ReadSparse<T0, ushort>());
				bag.component0 = arrayProvider.GetNativeArrayByComponent<T0, T0>(1, state.GetDense<T0>());
				bag.version0 = arrayProvider.GetNativeArrayByComponent<T0, uint>(2, state.ReadVersion<T0>());
                if (!bag.version0.IsCreated){ bag.version0 = arrayProvider.UintDummy; }
				bag.sparse1 = arrayProvider.GetNativeArrayByComponent<T1, ushort>(0, state.ReadSparse<T1, ushort>());
				bag.component1 = arrayProvider.GetNativeArrayByComponent<T1, T1>(1, state.GetDense<T1>());
				bag.version1 = arrayProvider.GetNativeArrayByComponent<T1, uint>(2, state.ReadVersion<T1>());
                if (!bag.version1.IsCreated){ bag.version1 = arrayProvider.UintDummy; }
				bag.sparse2 = arrayProvider.GetNativeArrayByComponent<T2, ushort>(0, state.ReadSparse<T2, ushort>());
				bag.component2 = arrayProvider.GetNativeArrayByComponent<T2, T2>(1, state.GetDense<T2>());
				bag.version2 = arrayProvider.GetNativeArrayByComponent<T2, uint>(2, state.ReadVersion<T2>());
                if (!bag.version2.IsCreated){ bag.version2 = arrayProvider.UintDummy; }
				bag.sparse3 = arrayProvider.GetNativeArrayByComponent<T3, ushort>(0, state.ReadSparse<T3, ushort>());
				bag.component3 = arrayProvider.GetNativeArrayByComponent<T3, T3>(1, state.GetDense<T3>());
				bag.version3 = arrayProvider.GetNativeArrayByComponent<T3, uint>(2, state.ReadVersion<T3>());
                if (!bag.version3.IsCreated){ bag.version3 = arrayProvider.UintDummy; }
				bag.sparse4 = arrayProvider.GetNativeArrayByComponent<T4, ushort>(0, state.ReadSparse<T4, ushort>());
				bag.component4 = arrayProvider.GetNativeArrayByComponent<T4, T4>(1, state.GetDense<T4>());
				bag.version4 = arrayProvider.GetNativeArrayByComponent<T4, uint>(2, state.ReadVersion<T4>());
                if (!bag.version4.IsCreated){ bag.version4 = arrayProvider.UintDummy; }

                return bag;
            }

			public static JobBag<T0, T1, T2, T3, T4> Create<T0, T1, T2, T3, T4>(IdFilter<T0, T1, T2, T3, T4> filter)
				where T0 : unmanaged, IComponent
				where T1 : unmanaged, IComponent
				where T2 : unmanaged, IComponent
				where T3 : unmanaged, IComponent
				where T4 : unmanaged, IComponent

				=> BagJobFactory.Create<T0, T1, T2, T3, T4>(filter.GetState(), filter.GetFilterData()->GetEntities());
			public static JobBag<T0, T1, T2, T3, T4, T5> Create<T0, T1, T2, T3, T4, T5>(State state, EntityCollection entities)
				where T0 : unmanaged, IComponent
				where T1 : unmanaged, IComponent
				where T2 : unmanaged, IComponent
				where T3 : unmanaged, IComponent
				where T4 : unmanaged, IComponent
				where T5 : unmanaged, IComponent

            {
                var arrayProvider = JobsGlobalRegister.Get(state);

                JobBag<T0, T1, T2, T3, T4, T5> bag;
                bag.indexes = arrayProvider.GetNativeArrayByDenseId<EntityId>(entities.id, entities.entities);
                bag.count = (int)entities.entities.Length;

				bag.sparse0 = arrayProvider.GetNativeArrayByComponent<T0, ushort>(0, state.ReadSparse<T0, ushort>());
				bag.component0 = arrayProvider.GetNativeArrayByComponent<T0, T0>(1, state.GetDense<T0>());
				bag.version0 = arrayProvider.GetNativeArrayByComponent<T0, uint>(2, state.ReadVersion<T0>());
                if (!bag.version0.IsCreated){ bag.version0 = arrayProvider.UintDummy; }
				bag.sparse1 = arrayProvider.GetNativeArrayByComponent<T1, ushort>(0, state.ReadSparse<T1, ushort>());
				bag.component1 = arrayProvider.GetNativeArrayByComponent<T1, T1>(1, state.GetDense<T1>());
				bag.version1 = arrayProvider.GetNativeArrayByComponent<T1, uint>(2, state.ReadVersion<T1>());
                if (!bag.version1.IsCreated){ bag.version1 = arrayProvider.UintDummy; }
				bag.sparse2 = arrayProvider.GetNativeArrayByComponent<T2, ushort>(0, state.ReadSparse<T2, ushort>());
				bag.component2 = arrayProvider.GetNativeArrayByComponent<T2, T2>(1, state.GetDense<T2>());
				bag.version2 = arrayProvider.GetNativeArrayByComponent<T2, uint>(2, state.ReadVersion<T2>());
                if (!bag.version2.IsCreated){ bag.version2 = arrayProvider.UintDummy; }
				bag.sparse3 = arrayProvider.GetNativeArrayByComponent<T3, ushort>(0, state.ReadSparse<T3, ushort>());
				bag.component3 = arrayProvider.GetNativeArrayByComponent<T3, T3>(1, state.GetDense<T3>());
				bag.version3 = arrayProvider.GetNativeArrayByComponent<T3, uint>(2, state.ReadVersion<T3>());
                if (!bag.version3.IsCreated){ bag.version3 = arrayProvider.UintDummy; }
				bag.sparse4 = arrayProvider.GetNativeArrayByComponent<T4, ushort>(0, state.ReadSparse<T4, ushort>());
				bag.component4 = arrayProvider.GetNativeArrayByComponent<T4, T4>(1, state.GetDense<T4>());
				bag.version4 = arrayProvider.GetNativeArrayByComponent<T4, uint>(2, state.ReadVersion<T4>());
                if (!bag.version4.IsCreated){ bag.version4 = arrayProvider.UintDummy; }
				bag.sparse5 = arrayProvider.GetNativeArrayByComponent<T5, ushort>(0, state.ReadSparse<T5, ushort>());
				bag.component5 = arrayProvider.GetNativeArrayByComponent<T5, T5>(1, state.GetDense<T5>());
				bag.version5 = arrayProvider.GetNativeArrayByComponent<T5, uint>(2, state.ReadVersion<T5>());
                if (!bag.version5.IsCreated){ bag.version5 = arrayProvider.UintDummy; }

                return bag;
            }

			public static JobBag<T0, T1, T2, T3, T4, T5> Create<T0, T1, T2, T3, T4, T5>(IdFilter<T0, T1, T2, T3, T4, T5> filter)
				where T0 : unmanaged, IComponent
				where T1 : unmanaged, IComponent
				where T2 : unmanaged, IComponent
				where T3 : unmanaged, IComponent
				where T4 : unmanaged, IComponent
				where T5 : unmanaged, IComponent

				=> BagJobFactory.Create<T0, T1, T2, T3, T4, T5>(filter.GetState(), filter.GetFilterData()->GetEntities());
			public static JobBag<T0, T1, T2, T3, T4, T5, T6> Create<T0, T1, T2, T3, T4, T5, T6>(State state, EntityCollection entities)
				where T0 : unmanaged, IComponent
				where T1 : unmanaged, IComponent
				where T2 : unmanaged, IComponent
				where T3 : unmanaged, IComponent
				where T4 : unmanaged, IComponent
				where T5 : unmanaged, IComponent
				where T6 : unmanaged, IComponent

            {
                var arrayProvider = JobsGlobalRegister.Get(state);

                JobBag<T0, T1, T2, T3, T4, T5, T6> bag;
                bag.indexes = arrayProvider.GetNativeArrayByDenseId<EntityId>(entities.id, entities.entities);
                bag.count = (int)entities.entities.Length;

				bag.sparse0 = arrayProvider.GetNativeArrayByComponent<T0, ushort>(0, state.ReadSparse<T0, ushort>());
				bag.component0 = arrayProvider.GetNativeArrayByComponent<T0, T0>(1, state.GetDense<T0>());
				bag.version0 = arrayProvider.GetNativeArrayByComponent<T0, uint>(2, state.ReadVersion<T0>());
                if (!bag.version0.IsCreated){ bag.version0 = arrayProvider.UintDummy; }
				bag.sparse1 = arrayProvider.GetNativeArrayByComponent<T1, ushort>(0, state.ReadSparse<T1, ushort>());
				bag.component1 = arrayProvider.GetNativeArrayByComponent<T1, T1>(1, state.GetDense<T1>());
				bag.version1 = arrayProvider.GetNativeArrayByComponent<T1, uint>(2, state.ReadVersion<T1>());
                if (!bag.version1.IsCreated){ bag.version1 = arrayProvider.UintDummy; }
				bag.sparse2 = arrayProvider.GetNativeArrayByComponent<T2, ushort>(0, state.ReadSparse<T2, ushort>());
				bag.component2 = arrayProvider.GetNativeArrayByComponent<T2, T2>(1, state.GetDense<T2>());
				bag.version2 = arrayProvider.GetNativeArrayByComponent<T2, uint>(2, state.ReadVersion<T2>());
                if (!bag.version2.IsCreated){ bag.version2 = arrayProvider.UintDummy; }
				bag.sparse3 = arrayProvider.GetNativeArrayByComponent<T3, ushort>(0, state.ReadSparse<T3, ushort>());
				bag.component3 = arrayProvider.GetNativeArrayByComponent<T3, T3>(1, state.GetDense<T3>());
				bag.version3 = arrayProvider.GetNativeArrayByComponent<T3, uint>(2, state.ReadVersion<T3>());
                if (!bag.version3.IsCreated){ bag.version3 = arrayProvider.UintDummy; }
				bag.sparse4 = arrayProvider.GetNativeArrayByComponent<T4, ushort>(0, state.ReadSparse<T4, ushort>());
				bag.component4 = arrayProvider.GetNativeArrayByComponent<T4, T4>(1, state.GetDense<T4>());
				bag.version4 = arrayProvider.GetNativeArrayByComponent<T4, uint>(2, state.ReadVersion<T4>());
                if (!bag.version4.IsCreated){ bag.version4 = arrayProvider.UintDummy; }
				bag.sparse5 = arrayProvider.GetNativeArrayByComponent<T5, ushort>(0, state.ReadSparse<T5, ushort>());
				bag.component5 = arrayProvider.GetNativeArrayByComponent<T5, T5>(1, state.GetDense<T5>());
				bag.version5 = arrayProvider.GetNativeArrayByComponent<T5, uint>(2, state.ReadVersion<T5>());
                if (!bag.version5.IsCreated){ bag.version5 = arrayProvider.UintDummy; }
				bag.sparse6 = arrayProvider.GetNativeArrayByComponent<T6, ushort>(0, state.ReadSparse<T6, ushort>());
				bag.component6 = arrayProvider.GetNativeArrayByComponent<T6, T6>(1, state.GetDense<T6>());
				bag.version6 = arrayProvider.GetNativeArrayByComponent<T6, uint>(2, state.ReadVersion<T6>());
                if (!bag.version6.IsCreated){ bag.version6 = arrayProvider.UintDummy; }

                return bag;
            }

			public static JobBag<T0, T1, T2, T3, T4, T5, T6> Create<T0, T1, T2, T3, T4, T5, T6>(IdFilter<T0, T1, T2, T3, T4, T5, T6> filter)
				where T0 : unmanaged, IComponent
				where T1 : unmanaged, IComponent
				where T2 : unmanaged, IComponent
				where T3 : unmanaged, IComponent
				where T4 : unmanaged, IComponent
				where T5 : unmanaged, IComponent
				where T6 : unmanaged, IComponent

				=> BagJobFactory.Create<T0, T1, T2, T3, T4, T5, T6>(filter.GetState(), filter.GetFilterData()->GetEntities());
			public static JobBag<T0, T1, T2, T3, T4, T5, T6, T7> Create<T0, T1, T2, T3, T4, T5, T6, T7>(State state, EntityCollection entities)
				where T0 : unmanaged, IComponent
				where T1 : unmanaged, IComponent
				where T2 : unmanaged, IComponent
				where T3 : unmanaged, IComponent
				where T4 : unmanaged, IComponent
				where T5 : unmanaged, IComponent
				where T6 : unmanaged, IComponent
				where T7 : unmanaged, IComponent

            {
                var arrayProvider = JobsGlobalRegister.Get(state);

                JobBag<T0, T1, T2, T3, T4, T5, T6, T7> bag;
                bag.indexes = arrayProvider.GetNativeArrayByDenseId<EntityId>(entities.id, entities.entities);
                bag.count = (int)entities.entities.Length;

				bag.sparse0 = arrayProvider.GetNativeArrayByComponent<T0, ushort>(0, state.ReadSparse<T0, ushort>());
				bag.component0 = arrayProvider.GetNativeArrayByComponent<T0, T0>(1, state.GetDense<T0>());
				bag.version0 = arrayProvider.GetNativeArrayByComponent<T0, uint>(2, state.ReadVersion<T0>());
                if (!bag.version0.IsCreated){ bag.version0 = arrayProvider.UintDummy; }
				bag.sparse1 = arrayProvider.GetNativeArrayByComponent<T1, ushort>(0, state.ReadSparse<T1, ushort>());
				bag.component1 = arrayProvider.GetNativeArrayByComponent<T1, T1>(1, state.GetDense<T1>());
				bag.version1 = arrayProvider.GetNativeArrayByComponent<T1, uint>(2, state.ReadVersion<T1>());
                if (!bag.version1.IsCreated){ bag.version1 = arrayProvider.UintDummy; }
				bag.sparse2 = arrayProvider.GetNativeArrayByComponent<T2, ushort>(0, state.ReadSparse<T2, ushort>());
				bag.component2 = arrayProvider.GetNativeArrayByComponent<T2, T2>(1, state.GetDense<T2>());
				bag.version2 = arrayProvider.GetNativeArrayByComponent<T2, uint>(2, state.ReadVersion<T2>());
                if (!bag.version2.IsCreated){ bag.version2 = arrayProvider.UintDummy; }
				bag.sparse3 = arrayProvider.GetNativeArrayByComponent<T3, ushort>(0, state.ReadSparse<T3, ushort>());
				bag.component3 = arrayProvider.GetNativeArrayByComponent<T3, T3>(1, state.GetDense<T3>());
				bag.version3 = arrayProvider.GetNativeArrayByComponent<T3, uint>(2, state.ReadVersion<T3>());
                if (!bag.version3.IsCreated){ bag.version3 = arrayProvider.UintDummy; }
				bag.sparse4 = arrayProvider.GetNativeArrayByComponent<T4, ushort>(0, state.ReadSparse<T4, ushort>());
				bag.component4 = arrayProvider.GetNativeArrayByComponent<T4, T4>(1, state.GetDense<T4>());
				bag.version4 = arrayProvider.GetNativeArrayByComponent<T4, uint>(2, state.ReadVersion<T4>());
                if (!bag.version4.IsCreated){ bag.version4 = arrayProvider.UintDummy; }
				bag.sparse5 = arrayProvider.GetNativeArrayByComponent<T5, ushort>(0, state.ReadSparse<T5, ushort>());
				bag.component5 = arrayProvider.GetNativeArrayByComponent<T5, T5>(1, state.GetDense<T5>());
				bag.version5 = arrayProvider.GetNativeArrayByComponent<T5, uint>(2, state.ReadVersion<T5>());
                if (!bag.version5.IsCreated){ bag.version5 = arrayProvider.UintDummy; }
				bag.sparse6 = arrayProvider.GetNativeArrayByComponent<T6, ushort>(0, state.ReadSparse<T6, ushort>());
				bag.component6 = arrayProvider.GetNativeArrayByComponent<T6, T6>(1, state.GetDense<T6>());
				bag.version6 = arrayProvider.GetNativeArrayByComponent<T6, uint>(2, state.ReadVersion<T6>());
                if (!bag.version6.IsCreated){ bag.version6 = arrayProvider.UintDummy; }
				bag.sparse7 = arrayProvider.GetNativeArrayByComponent<T7, ushort>(0, state.ReadSparse<T7, ushort>());
				bag.component7 = arrayProvider.GetNativeArrayByComponent<T7, T7>(1, state.GetDense<T7>());
				bag.version7 = arrayProvider.GetNativeArrayByComponent<T7, uint>(2, state.ReadVersion<T7>());
                if (!bag.version7.IsCreated){ bag.version7 = arrayProvider.UintDummy; }

                return bag;
            }

			public static JobBag<T0, T1, T2, T3, T4, T5, T6, T7> Create<T0, T1, T2, T3, T4, T5, T6, T7>(IdFilter<T0, T1, T2, T3, T4, T5, T6, T7> filter)
				where T0 : unmanaged, IComponent
				where T1 : unmanaged, IComponent
				where T2 : unmanaged, IComponent
				where T3 : unmanaged, IComponent
				where T4 : unmanaged, IComponent
				where T5 : unmanaged, IComponent
				where T6 : unmanaged, IComponent
				where T7 : unmanaged, IComponent

				=> BagJobFactory.Create<T0, T1, T2, T3, T4, T5, T6, T7>(filter.GetState(), filter.GetFilterData()->GetEntities());


		}
		public static JobHandle AsJobParallelR<TJob, T0>(this IdFilter<T0> filter, TJob job = default)
            where TJob : struct, IJobParallelForBag<JobBagR<T0>>
            where T0 : unmanaged, IComponent

			=> job.Schedule(BagJobFactory.CreateR(filter));
        
		public static JobHandle AsJobParallelR<TJob, T0, T1>(this IdFilter<T0, T1> filter, TJob job = default)
            where TJob : struct, IJobParallelForBag<JobBagR<T0, T1>>
            where T0 : unmanaged, IComponent
            where T1 : unmanaged, IComponent

			=> job.Schedule(BagJobFactory.CreateR(filter));
        
		public static JobHandle AsJobParallelR<TJob, T0, T1, T2>(this IdFilter<T0, T1, T2> filter, TJob job = default)
            where TJob : struct, IJobParallelForBag<JobBagR<T0, T1, T2>>
            where T0 : unmanaged, IComponent
            where T1 : unmanaged, IComponent
            where T2 : unmanaged, IComponent

			=> job.Schedule(BagJobFactory.CreateR(filter));
        
		public static JobHandle AsJobParallelR<TJob, T0, T1, T2, T3>(this IdFilter<T0, T1, T2, T3> filter, TJob job = default)
            where TJob : struct, IJobParallelForBag<JobBagR<T0, T1, T2, T3>>
            where T0 : unmanaged, IComponent
            where T1 : unmanaged, IComponent
            where T2 : unmanaged, IComponent
            where T3 : unmanaged, IComponent

			=> job.Schedule(BagJobFactory.CreateR(filter));
        
		public static JobHandle AsJobParallelR<TJob, T0, T1, T2, T3, T4>(this IdFilter<T0, T1, T2, T3, T4> filter, TJob job = default)
            where TJob : struct, IJobParallelForBag<JobBagR<T0, T1, T2, T3, T4>>
            where T0 : unmanaged, IComponent
            where T1 : unmanaged, IComponent
            where T2 : unmanaged, IComponent
            where T3 : unmanaged, IComponent
            where T4 : unmanaged, IComponent

			=> job.Schedule(BagJobFactory.CreateR(filter));
        
		public static JobHandle AsJobParallelR<TJob, T0, T1, T2, T3, T4, T5>(this IdFilter<T0, T1, T2, T3, T4, T5> filter, TJob job = default)
            where TJob : struct, IJobParallelForBag<JobBagR<T0, T1, T2, T3, T4, T5>>
            where T0 : unmanaged, IComponent
            where T1 : unmanaged, IComponent
            where T2 : unmanaged, IComponent
            where T3 : unmanaged, IComponent
            where T4 : unmanaged, IComponent
            where T5 : unmanaged, IComponent

			=> job.Schedule(BagJobFactory.CreateR(filter));
        
		public static JobHandle AsJobParallelR<TJob, T0, T1, T2, T3, T4, T5, T6>(this IdFilter<T0, T1, T2, T3, T4, T5, T6> filter, TJob job = default)
            where TJob : struct, IJobParallelForBag<JobBagR<T0, T1, T2, T3, T4, T5, T6>>
            where T0 : unmanaged, IComponent
            where T1 : unmanaged, IComponent
            where T2 : unmanaged, IComponent
            where T3 : unmanaged, IComponent
            where T4 : unmanaged, IComponent
            where T5 : unmanaged, IComponent
            where T6 : unmanaged, IComponent

			=> job.Schedule(BagJobFactory.CreateR(filter));
        
		public static JobHandle AsJobParallelR<TJob, T0, T1, T2, T3, T4, T5, T6, T7>(this IdFilter<T0, T1, T2, T3, T4, T5, T6, T7> filter, TJob job = default)
            where TJob : struct, IJobParallelForBag<JobBagR<T0, T1, T2, T3, T4, T5, T6, T7>>
            where T0 : unmanaged, IComponent
            where T1 : unmanaged, IComponent
            where T2 : unmanaged, IComponent
            where T3 : unmanaged, IComponent
            where T4 : unmanaged, IComponent
            where T5 : unmanaged, IComponent
            where T6 : unmanaged, IComponent
            where T7 : unmanaged, IComponent

			=> job.Schedule(BagJobFactory.CreateR(filter));
        

        public static JobHandle AsJobR<TJob, T0>(this IdFilter<T0> filter, TJob job = default)
            where TJob : struct, IJobForBag<JobBagR<T0>>
            where T0 : unmanaged, IComponent

			=> job.Schedule(BagJobFactory.CreateR(filter));
        public static JobHandle AsJobR<TJob, T0, T1>(this IdFilter<T0, T1> filter, TJob job = default)
            where TJob : struct, IJobForBag<JobBagR<T0, T1>>
            where T0 : unmanaged, IComponent
            where T1 : unmanaged, IComponent

			=> job.Schedule(BagJobFactory.CreateR(filter));
        public static JobHandle AsJobR<TJob, T0, T1, T2>(this IdFilter<T0, T1, T2> filter, TJob job = default)
            where TJob : struct, IJobForBag<JobBagR<T0, T1, T2>>
            where T0 : unmanaged, IComponent
            where T1 : unmanaged, IComponent
            where T2 : unmanaged, IComponent

			=> job.Schedule(BagJobFactory.CreateR(filter));
        public static JobHandle AsJobR<TJob, T0, T1, T2, T3>(this IdFilter<T0, T1, T2, T3> filter, TJob job = default)
            where TJob : struct, IJobForBag<JobBagR<T0, T1, T2, T3>>
            where T0 : unmanaged, IComponent
            where T1 : unmanaged, IComponent
            where T2 : unmanaged, IComponent
            where T3 : unmanaged, IComponent

			=> job.Schedule(BagJobFactory.CreateR(filter));
        public static JobHandle AsJobR<TJob, T0, T1, T2, T3, T4>(this IdFilter<T0, T1, T2, T3, T4> filter, TJob job = default)
            where TJob : struct, IJobForBag<JobBagR<T0, T1, T2, T3, T4>>
            where T0 : unmanaged, IComponent
            where T1 : unmanaged, IComponent
            where T2 : unmanaged, IComponent
            where T3 : unmanaged, IComponent
            where T4 : unmanaged, IComponent

			=> job.Schedule(BagJobFactory.CreateR(filter));
        public static JobHandle AsJobR<TJob, T0, T1, T2, T3, T4, T5>(this IdFilter<T0, T1, T2, T3, T4, T5> filter, TJob job = default)
            where TJob : struct, IJobForBag<JobBagR<T0, T1, T2, T3, T4, T5>>
            where T0 : unmanaged, IComponent
            where T1 : unmanaged, IComponent
            where T2 : unmanaged, IComponent
            where T3 : unmanaged, IComponent
            where T4 : unmanaged, IComponent
            where T5 : unmanaged, IComponent

			=> job.Schedule(BagJobFactory.CreateR(filter));
        public static JobHandle AsJobR<TJob, T0, T1, T2, T3, T4, T5, T6>(this IdFilter<T0, T1, T2, T3, T4, T5, T6> filter, TJob job = default)
            where TJob : struct, IJobForBag<JobBagR<T0, T1, T2, T3, T4, T5, T6>>
            where T0 : unmanaged, IComponent
            where T1 : unmanaged, IComponent
            where T2 : unmanaged, IComponent
            where T3 : unmanaged, IComponent
            where T4 : unmanaged, IComponent
            where T5 : unmanaged, IComponent
            where T6 : unmanaged, IComponent

			=> job.Schedule(BagJobFactory.CreateR(filter));
        public static JobHandle AsJobR<TJob, T0, T1, T2, T3, T4, T5, T6, T7>(this IdFilter<T0, T1, T2, T3, T4, T5, T6, T7> filter, TJob job = default)
            where TJob : struct, IJobForBag<JobBagR<T0, T1, T2, T3, T4, T5, T6, T7>>
            where T0 : unmanaged, IComponent
            where T1 : unmanaged, IComponent
            where T2 : unmanaged, IComponent
            where T3 : unmanaged, IComponent
            where T4 : unmanaged, IComponent
            where T5 : unmanaged, IComponent
            where T6 : unmanaged, IComponent
            where T7 : unmanaged, IComponent

			=> job.Schedule(BagJobFactory.CreateR(filter));

		public static JobHandle AsJobParallel<TJob, T0>(this IdFilter<T0> filter, TJob job = default)
            where TJob : struct, IJobParallelForBag<JobBag<T0>>
            where T0 : unmanaged, IComponent

			=> job.Schedule(BagJobFactory.Create(filter));
        
		public static JobHandle AsJobParallel<TJob, T0, T1>(this IdFilter<T0, T1> filter, TJob job = default)
            where TJob : struct, IJobParallelForBag<JobBag<T0, T1>>
            where T0 : unmanaged, IComponent
            where T1 : unmanaged, IComponent

			=> job.Schedule(BagJobFactory.Create(filter));
        
		public static JobHandle AsJobParallel<TJob, T0, T1, T2>(this IdFilter<T0, T1, T2> filter, TJob job = default)
            where TJob : struct, IJobParallelForBag<JobBag<T0, T1, T2>>
            where T0 : unmanaged, IComponent
            where T1 : unmanaged, IComponent
            where T2 : unmanaged, IComponent

			=> job.Schedule(BagJobFactory.Create(filter));
        
		public static JobHandle AsJobParallel<TJob, T0, T1, T2, T3>(this IdFilter<T0, T1, T2, T3> filter, TJob job = default)
            where TJob : struct, IJobParallelForBag<JobBag<T0, T1, T2, T3>>
            where T0 : unmanaged, IComponent
            where T1 : unmanaged, IComponent
            where T2 : unmanaged, IComponent
            where T3 : unmanaged, IComponent

			=> job.Schedule(BagJobFactory.Create(filter));
        
		public static JobHandle AsJobParallel<TJob, T0, T1, T2, T3, T4>(this IdFilter<T0, T1, T2, T3, T4> filter, TJob job = default)
            where TJob : struct, IJobParallelForBag<JobBag<T0, T1, T2, T3, T4>>
            where T0 : unmanaged, IComponent
            where T1 : unmanaged, IComponent
            where T2 : unmanaged, IComponent
            where T3 : unmanaged, IComponent
            where T4 : unmanaged, IComponent

			=> job.Schedule(BagJobFactory.Create(filter));
        
		public static JobHandle AsJobParallel<TJob, T0, T1, T2, T3, T4, T5>(this IdFilter<T0, T1, T2, T3, T4, T5> filter, TJob job = default)
            where TJob : struct, IJobParallelForBag<JobBag<T0, T1, T2, T3, T4, T5>>
            where T0 : unmanaged, IComponent
            where T1 : unmanaged, IComponent
            where T2 : unmanaged, IComponent
            where T3 : unmanaged, IComponent
            where T4 : unmanaged, IComponent
            where T5 : unmanaged, IComponent

			=> job.Schedule(BagJobFactory.Create(filter));
        
		public static JobHandle AsJobParallel<TJob, T0, T1, T2, T3, T4, T5, T6>(this IdFilter<T0, T1, T2, T3, T4, T5, T6> filter, TJob job = default)
            where TJob : struct, IJobParallelForBag<JobBag<T0, T1, T2, T3, T4, T5, T6>>
            where T0 : unmanaged, IComponent
            where T1 : unmanaged, IComponent
            where T2 : unmanaged, IComponent
            where T3 : unmanaged, IComponent
            where T4 : unmanaged, IComponent
            where T5 : unmanaged, IComponent
            where T6 : unmanaged, IComponent

			=> job.Schedule(BagJobFactory.Create(filter));
        
		public static JobHandle AsJobParallel<TJob, T0, T1, T2, T3, T4, T5, T6, T7>(this IdFilter<T0, T1, T2, T3, T4, T5, T6, T7> filter, TJob job = default)
            where TJob : struct, IJobParallelForBag<JobBag<T0, T1, T2, T3, T4, T5, T6, T7>>
            where T0 : unmanaged, IComponent
            where T1 : unmanaged, IComponent
            where T2 : unmanaged, IComponent
            where T3 : unmanaged, IComponent
            where T4 : unmanaged, IComponent
            where T5 : unmanaged, IComponent
            where T6 : unmanaged, IComponent
            where T7 : unmanaged, IComponent

			=> job.Schedule(BagJobFactory.Create(filter));
        

        public static JobHandle AsJob<TJob, T0>(this IdFilter<T0> filter, TJob job = default)
            where TJob : struct, IJobForBag<JobBag<T0>>
            where T0 : unmanaged, IComponent

			=> job.Schedule(BagJobFactory.Create(filter));
        public static JobHandle AsJob<TJob, T0, T1>(this IdFilter<T0, T1> filter, TJob job = default)
            where TJob : struct, IJobForBag<JobBag<T0, T1>>
            where T0 : unmanaged, IComponent
            where T1 : unmanaged, IComponent

			=> job.Schedule(BagJobFactory.Create(filter));
        public static JobHandle AsJob<TJob, T0, T1, T2>(this IdFilter<T0, T1, T2> filter, TJob job = default)
            where TJob : struct, IJobForBag<JobBag<T0, T1, T2>>
            where T0 : unmanaged, IComponent
            where T1 : unmanaged, IComponent
            where T2 : unmanaged, IComponent

			=> job.Schedule(BagJobFactory.Create(filter));
        public static JobHandle AsJob<TJob, T0, T1, T2, T3>(this IdFilter<T0, T1, T2, T3> filter, TJob job = default)
            where TJob : struct, IJobForBag<JobBag<T0, T1, T2, T3>>
            where T0 : unmanaged, IComponent
            where T1 : unmanaged, IComponent
            where T2 : unmanaged, IComponent
            where T3 : unmanaged, IComponent

			=> job.Schedule(BagJobFactory.Create(filter));
        public static JobHandle AsJob<TJob, T0, T1, T2, T3, T4>(this IdFilter<T0, T1, T2, T3, T4> filter, TJob job = default)
            where TJob : struct, IJobForBag<JobBag<T0, T1, T2, T3, T4>>
            where T0 : unmanaged, IComponent
            where T1 : unmanaged, IComponent
            where T2 : unmanaged, IComponent
            where T3 : unmanaged, IComponent
            where T4 : unmanaged, IComponent

			=> job.Schedule(BagJobFactory.Create(filter));
        public static JobHandle AsJob<TJob, T0, T1, T2, T3, T4, T5>(this IdFilter<T0, T1, T2, T3, T4, T5> filter, TJob job = default)
            where TJob : struct, IJobForBag<JobBag<T0, T1, T2, T3, T4, T5>>
            where T0 : unmanaged, IComponent
            where T1 : unmanaged, IComponent
            where T2 : unmanaged, IComponent
            where T3 : unmanaged, IComponent
            where T4 : unmanaged, IComponent
            where T5 : unmanaged, IComponent

			=> job.Schedule(BagJobFactory.Create(filter));
        public static JobHandle AsJob<TJob, T0, T1, T2, T3, T4, T5, T6>(this IdFilter<T0, T1, T2, T3, T4, T5, T6> filter, TJob job = default)
            where TJob : struct, IJobForBag<JobBag<T0, T1, T2, T3, T4, T5, T6>>
            where T0 : unmanaged, IComponent
            where T1 : unmanaged, IComponent
            where T2 : unmanaged, IComponent
            where T3 : unmanaged, IComponent
            where T4 : unmanaged, IComponent
            where T5 : unmanaged, IComponent
            where T6 : unmanaged, IComponent

			=> job.Schedule(BagJobFactory.Create(filter));
        public static JobHandle AsJob<TJob, T0, T1, T2, T3, T4, T5, T6, T7>(this IdFilter<T0, T1, T2, T3, T4, T5, T6, T7> filter, TJob job = default)
            where TJob : struct, IJobForBag<JobBag<T0, T1, T2, T3, T4, T5, T6, T7>>
            where T0 : unmanaged, IComponent
            where T1 : unmanaged, IComponent
            where T2 : unmanaged, IComponent
            where T3 : unmanaged, IComponent
            where T4 : unmanaged, IComponent
            where T5 : unmanaged, IComponent
            where T6 : unmanaged, IComponent
            where T7 : unmanaged, IComponent

			=> job.Schedule(BagJobFactory.Create(filter));


    }
}